version: '3.8'

services:
  user_api:
    build:
      context: ./user_api
    volumes:
      - /tmp:/tmp  # Share /tmp for the Unix Domain Socket
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - network

  user_interface:
    build:
      context: ./user_interface
    depends_on:
      - user_api
    volumes:
      - /tmp:/tmp
    ports:
      - "8501:8501"
    networks:
      - network

  admin_api:
    build:
      context: ./admin_api
    volumes:
      - /tmp:/tmp  # Share /tmp for the Unix Domain Socket
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    networks:
      - network

  admin_interface:
    build:
      context: ./admin_interface
    depends_on:
      - admin_api
    volumes:
      - /tmp:/tmp
    ports:
      - "8502:8502"
    networks:
      - network

  postgres:
    image: postgres:latest
    container_name: postgres_container
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_service/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 10s
      timeout: 3s
      retries: 20

volumes:
  postgres_data:

networks:
  network:
    driver: bridge
