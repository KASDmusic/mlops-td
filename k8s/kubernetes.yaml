apiVersion: v1
kind: Namespace
metadata:
  name: myapp
---
# ðŸ“¦ ConfigMap to initialize PostgreSQL with feedback table and sample data
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-initdb-config
  namespace: myapp
data:
  init.sql: |
    CREATE TABLE IF NOT EXISTS feedback (
        id SERIAL PRIMARY KEY,
        comment TEXT,
        rating INT
    );

    INSERT INTO feedback (comment, rating) VALUES ('Test de commentaire', 1);
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: myapp
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:latest
          env:
            - name: POSTGRES_USER
              value: "myuser"
            - name: POSTGRES_PASSWORD
              value: "mypassword"
            - name: POSTGRES_DB
              value: "mydatabase"
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
        - name: initdb
          configMap:
            name: postgres-initdb-config
            items:
              - key: init.sql
                path: init.sql
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: myapp
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-api
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-api
  template:
    metadata:
      labels:
        app: user-api
    spec:
      containers:
        - name: user-api
          image: hands_on_microservices-user_api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
          env:
            - name: POSTGRES_HOST
              value: "postgres"
---
apiVersion: v1
kind: Service
metadata:
  name: user-api
  namespace: myapp
spec:
  selector:
    app: user-api
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-interface
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-interface
  template:
    metadata:
      labels:
        app: user-interface
    spec:
      containers:
        - name: user-interface
          image: hands_on_microservices-user_interface:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8501
---
apiVersion: v1
kind: Service
metadata:
  name: user-interface
  namespace: myapp
spec:
  selector:
    app: user-interface
  ports:
    - protocol: TCP
      port: 8501
      targetPort: 8501
      nodePort: 30001
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-api
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-api
  template:
    metadata:
      labels:
        app: admin-api
    spec:
      containers:
        - name: admin-api
          image: hands_on_microservices-admin_api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8001
          env:
            - name: POSTGRES_HOST
              value: "postgres"
---
apiVersion: v1
kind: Service
metadata:
  name: admin-api
  namespace: myapp
spec:
  selector:
    app: admin-api
  ports:
    - protocol: TCP
      port: 8001
      targetPort: 8001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-interface
  namespace: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-interface
  template:
    metadata:
      labels:
        app: admin-interface
    spec:
      containers:
        - name: admin-interface
          image: hands_on_microservices-admin_interface:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8502
---
apiVersion: v1
kind: Service
metadata:
  name: admin-interface
  namespace: myapp
spec:
  selector:
    app: admin-interface
  ports:
    - protocol: TCP
      port: 8502
      targetPort: 8502
      nodePort: 30002
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myapp-ingress
  namespace: myapp
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/limit-rps: "10"
    nginx.ingress.kubernetes.io/limit-burst-multiplier: "2"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/enable-gzip: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
spec:
  rules:
  - host: myapp.local
    http:
      paths:
      - path: /user-interface
        pathType: Prefix
        backend:
          service:
            name: user-interface
            port:
              number: 8501
      - path: /admin-interface
        pathType: Prefix
        backend:
          service:
            name: admin-interface
            port:
              number: 8502
